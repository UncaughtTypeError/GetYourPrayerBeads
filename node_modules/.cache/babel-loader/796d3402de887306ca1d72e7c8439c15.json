{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\XPS-User\\\\Desktop\\\\Nathan\\\\Temp\\\\Apps\\\\getyourprayerbeads\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\XPS-User\\\\Desktop\\\\Nathan\\\\Temp\\\\Apps\\\\getyourprayerbeads\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\XPS-User\\\\Desktop\\\\Nathan\\\\Temp\\\\Apps\\\\getyourprayerbeads\\\\src\\\\components\\\\FiltersContext.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'; // Material Components\n\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel'; //import Filters from './Filters';\n\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Paper from '@material-ui/core/Paper';\nconst FilterForm = withStyles(theme => ({\n  formGroup: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    [theme.breakpoints.down('sm')]: {\n      justifyContent: 'space-around'\n    }\n  },\n  formWrap: {\n    padding: '15px',\n    margin: '10px 15px'\n  }\n}))(props => {\n  const classes = props.classes;\n  return React.createElement(Paper, {\n    className: classes.formWrap,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    className: classes.formGroup,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, filtersState.filters.map(filter => React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      id: filter.id,\n      value: filter.val,\n      color: \"primary\",\n      checked: filtersState.allActive ? true : filter.active,\n      onChange: event => filtersState.handleChangeCheckbox(filter.id, filter.val, event.target.checked),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }),\n    label: filter.val,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }))));\n});\nconst defaultContextData = {\n  filters: [{\n    id: 1,\n    val: \"All\",\n    active: true\n  }]\n};\nconst FilterContext = React.createContext(defaultContextData);\n\nconst useFilters = () => React.useContext(FilterContext);\n\nconst useEffectFilters = () => {\n  const _React$useState = React.useState({\n    filters: FilterContext\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        filtersState = _React$useState2[0],\n        setFiltersState = _React$useState2[1];\n\n  React.useEffect(() => {\n    setFiltersState(_objectSpread({}, filtersState));\n  }, []);\n  return [filtersState, setFiltersState];\n};\n\nconst FiltersProvider = props => {\n  //filters(this.props.dataFilters, this.state);\n  const classes = props.classes,\n        dataFilters = props.dataFilters,\n        children = props.children; //const { display } = this.state;\n  // state = filters(this.props.dataFilters);\n  // state = {...this.props.dataFilters};\n  //render() {\n  //localStorage.setItem(\"Filter\", 'All');\n\n  const initialFilters = () => {\n    return dataFilters.map(filter => //this.setState({ filter: false })\n    filter);\n  };\n\n  const _React$useState3 = React.useState(initialFilters),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        filters = _React$useState4[0],\n        setFilters = _React$useState4[1];\n\n  const _React$useState5 = React.useState(true),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        allActive = _React$useState6[0],\n        setAllFilters = _React$useState6[1];\n\n  const _useEffectFilters = useEffectFilters(),\n        _useEffectFilters2 = _slicedToArray(_useEffectFilters, 2),\n        filtersState = _useEffectFilters2[0],\n        setFiltersState = _useEffectFilters2[1]; //const [task, setActiveFilters] = useState('');\n\n  /*const filter = (val) => {\r\n    localStorage.setItem(\"Filter\", val);\r\n      const bool = localStorage.getItem(\"Filter\") === \"true\";\r\n      const current = localStorage.getItem(\"Filter\");\r\n      console.log(val);\r\n      console.log(bool, current);\r\n  }*/\n\n\n  const handleChangeCheckbox = (id, val, event) => {\n    //resetFilters(event ? true : false);\n    setAllFilters(() => val === 'All' ? true : false);\n    setFilters(filters.map(filter => {\n      if (val === 'All') {\n        return _objectSpread({}, filter, {\n          active: true\n        });\n      } else if (filter.id === id) {\n        if (allActive) {\n          filters[0].active = false;\n        }\n\n        ;\n        filter.active = !filter.active; //return { ...filter, active: !filter.active };\n\n        return filter;\n      } else {\n        return filter;\n      }\n    }));\n    /*       if(val === 'All') { \r\n            resetFilters(event ? true : false);\r\n            setFilters(\r\n              filters.map(filter => {\r\n                if (allActive && filter.val === 'All') {\r\n                  return { ...filter, active: true };\r\n                } else if (filter.id === id) {\r\n                  return { ...filter, active: !filter.active };\r\n                }\r\n              })\r\n            )\r\n          } else {\r\n            resetFilters(false);\r\n            setFilters(\r\n              filters.map(filter => {\r\n                if (filter.id === id) {\r\n                  return { ...filter, active: !filter.active };\r\n                } else {\r\n                  return filter;\r\n                }\r\n              })\r\n            )\r\n          } */\n\n    /*localStorage.getItem(id) ? \r\n      localStorage.removeItem(id)\r\n      :\r\n      localStorage.setItem(id, val);*/\n    //setActiveFilters(event);\n\n    console.log('event', event); //setFiltersState(filters.concat({ ...filtersState, id: id, val, active: false }));\n  };\n\n  return React.createElement(FilterContext.Provider, {\n    value: {\n      allActive: allActive,\n      filters: filters\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, React.createElement(Paper, {\n    className: classes.formWrap,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    className: classes.formGroup,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, filters.map(filter => React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox //checked={this.state.display}\n    //onChange={event => this.setState({ display: event.target.checked })}\n    //value={this.state.display}\n    , {\n      id: filter.id,\n      value: filter.val,\n      color: \"primary\" //checked={localStorage.getItem(filter.id) ? true : false}\n      ,\n      checked: allActive ? true : filter.active,\n      onChange: event => handleChangeCheckbox(filter.id, filter.val, event.target.checked) //onChange={event => console.log('test:',event.target.checked)}\n      ,\n      test: localStorage.getItem(filter.id) ? true : false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }),\n    label: filter.val,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  })))), React.createElement(FilterForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }), children); //}\n};\n\nFiltersProvider.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)({\n  FiltersProvider\n});\nexport { FiltersProvider, useFilters };","map":{"version":3,"sources":["C:\\Users\\XPS-User\\Desktop\\Nathan\\Temp\\Apps\\getyourprayerbeads\\src\\components\\FiltersContext.js"],"names":["React","PropTypes","withStyles","FormGroup","FormControlLabel","Checkbox","Paper","FilterForm","theme","formGroup","flexDirection","justifyContent","breakpoints","down","formWrap","padding","margin","props","classes","filtersState","filters","map","filter","id","val","allActive","active","event","handleChangeCheckbox","target","checked","defaultContextData","FilterContext","createContext","useFilters","useContext","useEffectFilters","useState","setFiltersState","useEffect","FiltersProvider","dataFilters","children","initialFilters","setFilters","setAllFilters","console","log","localStorage","getItem","propTypes","object","isRequired","styles"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n// Material Components\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n//import Filters from './Filters';\r\n\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst FilterForm = withStyles(theme => ({\r\n  formGroup: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    [theme.breakpoints.down('sm')]: {  \r\n      justifyContent: 'space-around',\r\n    },\r\n  },\r\n  formWrap: {\r\n    padding: '15px',\r\n    margin: '10px 15px',\r\n  },\r\n}))(props => {\r\n  const { classes } = props;\r\n  return (\r\n    <Paper className={classes.formWrap}>\r\n      <FormGroup className={classes.formGroup}>\r\n        {filtersState.filters.map(filter => (\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                id={filter.id}\r\n                value={filter.val}\r\n                color=\"primary\"\r\n                checked={filtersState.allActive ? true : filter.active}\r\n                onChange={(event) => filtersState.handleChangeCheckbox(filter.id, filter.val, event.target.checked)}\r\n              />\r\n            }\r\n            label={filter.val}\r\n          />\r\n        ))}\r\n      </FormGroup>\r\n    </Paper>\r\n  );\r\n});\r\n\r\nconst defaultContextData = {\r\n  filters: [\r\n    { id: 1, val: `All`, active: true, }\r\n  ]\r\n};\r\n\r\nconst FilterContext = React.createContext(defaultContextData);\r\nconst useFilters = () => React.useContext(FilterContext);\r\n\r\nconst useEffectFilters = () => {\r\n  const [filtersState, setFiltersState] = React.useState({\r\n    filters: FilterContext\r\n  });\r\n  React.useEffect(() => {\r\n    setFiltersState({ ...filtersState });\r\n  }, []);\r\n\r\n  return [filtersState, setFiltersState];\r\n};\r\n\r\nconst FiltersProvider = (props) => {\r\n  \r\n  //filters(this.props.dataFilters, this.state);\r\n\r\n  const { classes, dataFilters, children } = props;\r\n  //const { display } = this.state;\r\n\r\n  // state = filters(this.props.dataFilters);\r\n  // state = {...this.props.dataFilters};\r\n\r\n  //render() {\r\n\r\n    //localStorage.setItem(\"Filter\", 'All');\r\n\r\n    const initialFilters = () => {\r\n      return (\r\n        dataFilters.map(filter => (\r\n          //this.setState({ filter: false })\r\n          filter\r\n        ))\r\n      )\r\n    }\r\n\r\n    const [filters, setFilters] = React.useState(initialFilters);\r\n    const [allActive, setAllFilters] = React.useState(true);\r\n\r\n    const [filtersState, setFiltersState] = useEffectFilters();\r\n    \r\n    //const [task, setActiveFilters] = useState('');\r\n\r\n    /*const filter = (val) => {\r\n      localStorage.setItem(\"Filter\", val);\r\n        const bool = localStorage.getItem(\"Filter\") === \"true\";\r\n        const current = localStorage.getItem(\"Filter\");\r\n        console.log(val);\r\n        console.log(bool, current);\r\n    }*/\r\n\r\n    const handleChangeCheckbox = (id, val, event) => {\r\n      //resetFilters(event ? true : false);\r\n      setAllFilters (() => val === 'All' ? true : false);\r\n      setFilters(\r\n        filters.map(filter => {\r\n          if (val === 'All') {\r\n            return { ...filter, active: true };\r\n          } else if (filter.id === id) {\r\n            if (allActive) { filters[0].active = false };\r\n            filter.active = !filter.active;\r\n            //return { ...filter, active: !filter.active };\r\n            return filter;\r\n          } else {\r\n            return filter;\r\n          }\r\n        })\r\n      )\r\n\r\n/*       if(val === 'All') { \r\n        resetFilters(event ? true : false);\r\n        setFilters(\r\n          filters.map(filter => {\r\n            if (allActive && filter.val === 'All') {\r\n              return { ...filter, active: true };\r\n            } else if (filter.id === id) {\r\n              return { ...filter, active: !filter.active };\r\n            }\r\n          })\r\n        )\r\n      } else {\r\n        resetFilters(false);\r\n        setFilters(\r\n          filters.map(filter => {\r\n            if (filter.id === id) {\r\n              return { ...filter, active: !filter.active };\r\n            } else {\r\n              return filter;\r\n            }\r\n          })\r\n        )\r\n      } */\r\n      \r\n      /*localStorage.getItem(id) ? \r\n        localStorage.removeItem(id)\r\n        :\r\n        localStorage.setItem(id, val);*/\r\n\r\n      //setActiveFilters(event);\r\n      console.log('event',event);\r\n\r\n      //setFiltersState(filters.concat({ ...filtersState, id: id, val, active: false }));\r\n    };\r\n\r\n    return (\r\n      <FilterContext.Provider\r\n        value={{\r\n          allActive: allActive,\r\n          filters: filters,\r\n        }}\r\n      >\r\n        <Paper className={classes.formWrap}>\r\n          <FormGroup className={classes.formGroup}>\r\n            {filters.map(filter => (\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                  //checked={this.state.display}\r\n                  //onChange={event => this.setState({ display: event.target.checked })}\r\n                  //value={this.state.display}\r\n                    id={filter.id}\r\n                    value={filter.val}\r\n                    color=\"primary\"\r\n                    //checked={localStorage.getItem(filter.id) ? true : false}\r\n                    checked={allActive ? true : filter.active}\r\n                    onChange={(event) => handleChangeCheckbox(filter.id, filter.val, event.target.checked)}\r\n                    //onChange={event => console.log('test:',event.target.checked)}\r\n                    test={localStorage.getItem(filter.id) ? true : false}\r\n                  />\r\n                }\r\n                label={filter.val}\r\n              />\r\n            ))}\r\n          </FormGroup>\r\n        </Paper>\r\n      <FilterForm />\r\n          {children}\r\n      </FilterContext.Provider>\r\n    )\r\n  //}\r\n\r\n}\r\n\r\nFiltersProvider.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)({ FiltersProvider });\r\nexport { FiltersProvider, useFilters }"]},"metadata":{},"sourceType":"module"}