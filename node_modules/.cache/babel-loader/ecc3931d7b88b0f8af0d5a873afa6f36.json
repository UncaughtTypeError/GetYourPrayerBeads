{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\XPS-User\\\\Desktop\\\\Nathan\\\\Temp\\\\Apps\\\\getyourprayerbeads\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\XPS-User\\\\Desktop\\\\Nathan\\\\Temp\\\\Apps\\\\getyourprayerbeads\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\XPS-User\\\\Desktop\\\\Nathan\\\\Temp\\\\Apps\\\\getyourprayerbeads\\\\src\\\\theme\\\\ThemeContext.js\";\nimport React from 'react'; // Components\n\nimport { ThemeProvider as MaterialThemeProvider } from '@material-ui/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport SetTheme from \"./SetTheme.js\";\nconst defaultContextData = {\n  light: false,\n  toggle: () => {}\n};\nconst ThemeContext = React.createContext(defaultContextData);\n\nconst useTheme = () => React.useContext(ThemeContext);\n\nconst useEffectThemeSwitch = () => {\n  const _React$useState = React.useState({\n    light: false,\n    hasThemeMounted: false\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        themeState = _React$useState2[0],\n        setThemeState = _React$useState2[1];\n\n  React.useEffect(() => {\n    const lsDark = localStorage.getItem(\"light\") === \"true\";\n    const lsTheme = localStorage.getItem(\"Theme\");\n    setThemeState(_objectSpread({}, themeState, {\n      light: lsDark,\n      lsTheme,\n      hasThemeMounted: true\n    }));\n  }, []);\n  return [themeState, setThemeState];\n};\n\nconst ThemeProvider = ({\n  children\n}) => {\n  const _useEffectThemeSwitch = useEffectThemeSwitch(),\n        _useEffectThemeSwitch2 = _slicedToArray(_useEffectThemeSwitch, 2),\n        themeState = _useEffectThemeSwitch2[0],\n        setThemeState = _useEffectThemeSwitch2[1];\n\n  if (!themeState.hasThemeMounted) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    });\n  }\n\n  const toggle = () => {\n    const light = !themeState.light;\n    localStorage.setItem(\"light\", JSON.stringify(light));\n    localStorage.setItem(\"Theme\", light ? 'Dark Theme' : 'Light Theme');\n    setThemeState(_objectSpread({}, themeState, {\n      light\n    }));\n  };\n\n  const computedTheme = themeState.light ? SetTheme(\"light\") : SetTheme(\"dark\");\n  return React.createElement(MaterialThemeProvider, {\n    theme: computedTheme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(ThemeContext.Provider, {\n    value: {\n      dark: themeState.dark,\n      toggle\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(CssBaseline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), children));\n};\n\nexport { ThemeProvider, useTheme };","map":{"version":3,"sources":["C:\\Users\\XPS-User\\Desktop\\Nathan\\Temp\\Apps\\getyourprayerbeads\\src\\theme\\ThemeContext.js"],"names":["React","ThemeProvider","MaterialThemeProvider","CssBaseline","SetTheme","defaultContextData","light","toggle","ThemeContext","createContext","useTheme","useContext","useEffectThemeSwitch","useState","hasThemeMounted","themeState","setThemeState","useEffect","lsDark","localStorage","getItem","lsTheme","children","setItem","JSON","stringify","computedTheme","dark"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,aAAa,IAAIC,qBAA1B,QAAuD,qBAAvD;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,KAAK,EAAE,KADkB;AAEzBC,EAAAA,MAAM,EAAE,MAAM,CAAE;AAFS,CAA3B;AAKA,MAAMC,YAAY,GAAGR,KAAK,CAACS,aAAN,CAAoBJ,kBAApB,CAArB;;AACA,MAAMK,QAAQ,GAAG,MAAMV,KAAK,CAACW,UAAN,CAAiBH,YAAjB,CAAvB;;AAEA,MAAMI,oBAAoB,GAAG,MAAM;AAAA,0BACGZ,KAAK,CAACa,QAAN,CAAe;AACjDP,IAAAA,KAAK,EAAE,KAD0C;AAEjDQ,IAAAA,eAAe,EAAE;AAFgC,GAAf,CADH;AAAA;AAAA,QAC1BC,UAD0B;AAAA,QACdC,aADc;;AAKjChB,EAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAM;AACpB,UAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,MAAkC,MAAjD;AACA,UAAMC,OAAO,GAAGF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAhB;AACAJ,IAAAA,aAAa,mBAAMD,UAAN;AAAkBT,MAAAA,KAAK,EAAEY,MAAzB;AAAiCG,MAAAA,OAAjC;AAA0CP,MAAAA,eAAe,EAAE;AAA3D,OAAb;AACD,GAJD,EAIG,EAJH;AAMA,SAAO,CAACC,UAAD,EAAaC,aAAb,CAAP;AACD,CAZD;;AAcA,MAAMf,aAAa,GAAG,CAAC;AAAEqB,EAAAA;AAAF,CAAD,KAAkB;AAAA,gCACFV,oBAAoB,EADlB;AAAA;AAAA,QAC/BG,UAD+B;AAAA,QACnBC,aADmB;;AAGtC,MAAI,CAACD,UAAU,CAACD,eAAhB,EAAiC;AAC/B,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,QAAMP,MAAM,GAAG,MAAM;AACnB,UAAMD,KAAK,GAAG,CAACS,UAAU,CAACT,KAA1B;AACAa,IAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAenB,KAAf,CAA9B;AACAa,IAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8BjB,KAAK,GAAG,YAAH,GAAkB,aAArD;AACAU,IAAAA,aAAa,mBAAMD,UAAN;AAAkBT,MAAAA;AAAlB,OAAb;AACD,GALD;;AAOA,QAAMoB,aAAa,GAAGX,UAAU,CAACT,KAAX,GAAmBF,QAAQ,CAAC,OAAD,CAA3B,GAAuCA,QAAQ,CAAC,MAAD,CAArE;AAEA,SACE,oBAAC,qBAAD;AAAuB,IAAA,KAAK,EAAEsB,aAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAEZ,UAAU,CAACY,IADZ;AAELpB,MAAAA;AAFK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAOGe,QAPH,CADF,CADF;AAaD,CA7BD;;AA+BA,SAASrB,aAAT,EAAwBS,QAAxB","sourcesContent":["import React from 'react';\r\n// Components\r\nimport { ThemeProvider as MaterialThemeProvider } from '@material-ui/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport SetTheme from \"./SetTheme.js\";\r\n\r\nconst defaultContextData = {\r\n  light: false,\r\n  toggle: () => {}\r\n};\r\n\r\nconst ThemeContext = React.createContext(defaultContextData);\r\nconst useTheme = () => React.useContext(ThemeContext);\r\n\r\nconst useEffectThemeSwitch = () => {\r\n  const [themeState, setThemeState] = React.useState({\r\n    light: false,\r\n    hasThemeMounted: false\r\n  });\r\n  React.useEffect(() => {\r\n    const lsDark = localStorage.getItem(\"light\") === \"true\";\r\n    const lsTheme = localStorage.getItem(\"Theme\");\r\n    setThemeState({ ...themeState, light: lsDark, lsTheme, hasThemeMounted: true });\r\n  }, []);\r\n\r\n  return [themeState, setThemeState];\r\n};\r\n\r\nconst ThemeProvider = ({ children }) => {\r\n  const [themeState, setThemeState] = useEffectThemeSwitch();\r\n\r\n  if (!themeState.hasThemeMounted) {\r\n    return <div />;\r\n  }\r\n\r\n  const toggle = () => {\r\n    const light = !themeState.light;\r\n    localStorage.setItem(\"light\", JSON.stringify(light));\r\n    localStorage.setItem(\"Theme\", light ? 'Dark Theme' : 'Light Theme');\r\n    setThemeState({ ...themeState, light });\r\n  };\r\n\r\n  const computedTheme = themeState.light ? SetTheme(\"light\") : SetTheme(\"dark\");\r\n\r\n  return (\r\n    <MaterialThemeProvider theme={computedTheme}>\r\n      <ThemeContext.Provider\r\n        value={{\r\n          dark: themeState.dark,\r\n          toggle\r\n        }}\r\n      >\r\n        <CssBaseline />\r\n        {children}\r\n      </ThemeContext.Provider>\r\n    </MaterialThemeProvider>\r\n  );\r\n};\r\n\r\nexport { ThemeProvider, useTheme };"]},"metadata":{},"sourceType":"module"}